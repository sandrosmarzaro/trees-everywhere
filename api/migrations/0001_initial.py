# Generated by Django 5.2.4 on 2025-07-24 20:10

import api.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid6
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', api.models.UUIDv7Field(default=uuid6.uuid7, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tree',
            fields=[
                ('id', api.models.UUIDv7Field(default=uuid6.uuid7, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('scientific_name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', api.models.UUIDv7Field(default=uuid6.uuid7, editable=False, primary_key=True, serialize=False, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', api.models.UUIDv7Field(default=uuid6.uuid7, editable=False, primary_key=True, serialize=False, unique=True)),
                ('about', models.TextField(blank=True, null=True)),
                ('joined', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-joined'],
            },
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', api.models.UUIDv7Field(default=uuid6.uuid7, editable=False, primary_key=True, serialize=False, unique=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.account')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-joined_at'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='accounts',
            field=models.ManyToManyField(blank=True, related_name='users', through='api.UserAccount', to='api.account'),
        ),
        migrations.CreateModel(
            name='PlantedTree',
            fields=[
                ('id', api.models.UUIDv7Field(default=uuid6.uuid7, editable=False, primary_key=True, serialize=False, unique=True)),
                ('planted_at', models.DateTimeField(auto_now_add=True)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planted_trees', to='api.account')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planted_trees', to=settings.AUTH_USER_MODEL)),
                ('tree', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='plantings', to='api.tree')),
            ],
            options={
                'ordering': ['-planted_at'],
                'indexes': [models.Index(fields=['user', 'account'], name='api_planted_user_id_518b6a_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='useraccount',
            constraint=models.UniqueConstraint(fields=('user', 'account'), name='unique_user_account'),
        ),
    ]
